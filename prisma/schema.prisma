// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum UserRole {
  technical
  customer
  admin
}

 model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  role UserRole @default(customer)
  avatar String @default("default.svg")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userHours UserHours []
  calledCustomer Called[] @relation("CustomerCalls")
  calledTechnical Called[] @relation("TechnicalCalls")

  @@map("user")
 }

 model UserHours {
  id String @id @default(uuid())
  fkUserTechnical String @map("fk_user_technical")
  startTime DateTime @map("start_time")
  endTime DateTime @map("end_time")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user User @relation(fields: [fkUserTechnical], references: [id], onDelete: Cascade)

  @@map("user_hours")
 } 

 enum CalledStatus {
  open 
  close
  in_progress
 }

 model Called {
  id Int @id @default(autoincrement())
  fkUserCustomer String @map("fk_user_customer")
  fkUserTechnical String? @map("fk_user_technical")
  titleCalled String @map("title_called")
  description String
  basePrice Decimal
  callStatus CalledStatus @default(open) @map("call_status")
  appointmentTime DateTime @map("appointment_Time")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  UserCustomer User @relation("CustomerCalls", fields: [fkUserCustomer], references: [id], onDelete: Cascade)
  UserTechnical User? @relation("TechnicalCalls", fields: [fkUserTechnical], references: [id], onDelete: Cascade)
  services CalledServices[]

  @@map("called")
 }

 enum ServicesStatus {
  active
  inactive
 }

 model Services {
  id String @id @default(uuid())
  titleService String @map("title_service")
  price Decimal
  serviceStatus ServicesStatus @default(active) @map("service_status")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  calledServices CalledServices[]

  @@map("services")
 }

 model CalledServices {
  id String @id @default(uuid())
  fkCalled Int @map("fk_called")
  fkServices String @map("fk_services")
  titleService String @map("title_service")
  price Decimal
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  called Called @relation(fields: [fkCalled], references: [id], onDelete: Cascade)
  services Services @relation(fields: [fkServices], references: [id], onDelete: Cascade)

  @@map("called_services")
 }